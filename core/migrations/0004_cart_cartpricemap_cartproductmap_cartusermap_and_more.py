# Generated by Django 4.2.3 on 2023-07-17 10:16

from django.db import migrations, models

from timmarket import settings


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0003_product"),
    ]

    operations = [
        migrations.CreateModel(
            name="Cart",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("created_at", models.IntegerField()),
                ("updated_at", models.IntegerField()),
            ],
            options={
                "db_table": "cart",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CartPriceMap",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("cart_id", models.BigIntegerField(unique=True)),
                (
                    "total_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "net_total_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "vat_percent",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "vat_tax_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
            ],
            options={
                "db_table": "cart_price_map",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CartProductMap",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("cart_id", models.IntegerField()),
                ("product_id", models.IntegerField()),
                ("quantity", models.PositiveIntegerField(blank=True, null=True)),
                ("category_id", models.IntegerField()),
            ],
            options={
                "db_table": "cart_product_map",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CartUserMap",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("cart_id", models.BigIntegerField()),
                ("user_id", models.BigIntegerField()),
                ("platform", models.CharField(blank=True, max_length=26, null=True)),
            ],
            options={
                "db_table": "cart_user_map",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "category",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="OrderProductMap",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("product_id", models.BigIntegerField()),
                ("order_id", models.BigIntegerField()),
                ("quantity", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "order_product_map",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="OrderStatus",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("order_id", models.BigIntegerField(unique=True)),
                ("status", models.CharField(blank=True, max_length=10, null=True)),
                ("created_at", models.IntegerField()),
                ("updated_at", models.IntegerField()),
            ],
            options={
                "db_table": "order_status",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="OrderTable",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("cart_id", models.BigIntegerField()),
                (
                    "total_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "net_total_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "vat_percent",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "vat_tax_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("created_at", models.IntegerField()),
                ("updated_at", models.IntegerField()),
                (
                    "description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "order_table",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ProductCategoryMap",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("product_id", models.IntegerField()),
                ("category_id", models.IntegerField()),
            ],
            options={
                "db_table": "product_category_map",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ProductCategoryPriceMap",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("product_category_id", models.IntegerField(unique=True)),
                (
                    "price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
            ],
            options={
                "db_table": "product_category_price_map",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ProductInventoryMap",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("product_category_id", models.IntegerField(unique=True)),
                ("quantity", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "weight",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
            ],
            options={
                "db_table": "product_inventory_map",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="UserOrderMap",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("user_id", models.BigIntegerField()),
                ("order_id", models.BigIntegerField()),
            ],
            options={
                "db_table": "user_order_map",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                # ...
            ],
            options={
                "db_table": "core_user",
                # 'managed': False,
                "managed": settings.IS_TESTING,
            },
        ),
    ]
